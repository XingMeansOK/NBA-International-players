{"dependencies":[{"name":"./lib/three.js","loc":{"line":1,"column":21}},{"name":"./constant.js","loc":{"line":2,"column":25}}],"generated":{"js":"var THREE = require( './lib/three.js' );\r\nvar constants = require( './constant.js' );\r\n\r\n/*\r\n  所有图层的父类，继承自three Group\r\n*/\r\nfunction Layer() {\r\n\r\n  THREE.Group.call( this );\r\n\r\n}\r\n\r\nLayer.prototype = Object.assign( Object.create( THREE.Group.prototype ), {\r\n\r\n  constructor: Layer,\r\n\r\n  /**\r\n   * 在指定位置添加three要素\r\n   * @param  {Object} obj     [Mesh]\r\n   * @param  {Array} lnglat  [经纬度]\r\n   * @param  {Object} options [description]\r\n   * @return {[type]}         [description]\r\n   */\r\n  addAtCoordinate: function(obj, lnglat, options) {\r\n       var geoGroup = new THREE.Group();\r\n       geoGroup.userData.isGeoGroup = true;\r\n       geoGroup.add(obj);\r\n       this.add(geoGroup);\r\n       this.moveToCoordinate(obj, lnglat, options);\r\n\r\n       // Bestow this mesh with animation superpowers and keeps track of its movements in the global animation queue\r\n       //this.animationManager.enroll(obj);\r\n\r\n       return obj;\r\n   },\r\n\r\n   moveToCoordinate: function(obj, lnglat, options) {\r\n       /** Place the given object on the map, centered around the provided longitude and latitude\r\n           The object's internal coordinates are assumed to be in meter-offset format, meaning\r\n           1 unit represents 1 meter distance away from the provided coordinate.\r\n       */\r\n\r\n       if (options === undefined) options = {};\r\n       if(options.preScale === undefined) options.preScale = 1.0;\r\n       if(options.scaleToLatitude === undefined || obj.userData.scaleToLatitude) options.scaleToLatitude = true;\r\n\r\n       obj.userData.scaleToLatitude = options.scaleToLatitude;\r\n\r\n       if (typeof options.preScale === 'number') options.preScale = new THREE.Vector3(options.preScale, options.preScale, options.preScale);\r\n       else if(options.preScale.constructor === Array && options.preScale.length === 3) options.preScale = new THREE.Vector3(options.preScale[0], options.preScale[1], options.preScale[2]);\r\n       else if(options.preScale.constructor !== THREE.Vector3) {\r\n           console.warn(\"Invalid preScale value: number, Array with length 3, or THREE.Vector3 expected. Defaulting to [1,1,1]\");\r\n           options.preScale = new THREE.Vector3(1,1,1);\r\n       }\r\n\r\n       var scale = options.preScale;\r\n\r\n       // Figure out if this object is a geoGroup and should be positioned and scaled directly, or if its parent\r\n       var geoGroup;\r\n       if (obj.userData.isGeoGroup) geoGroup = obj;\r\n       else if (obj.parent && obj.parent.userData.isGeoGroup) geoGroup = obj.parent;\r\n       else return console.error(\"Cannot set geographic coordinates of object that does not have an associated GeoGroup. Object must be added to scene with 'addAtCoordinate()'.\")\r\n\r\n       if(options.scaleToLatitude) {\r\n           // Scale the model so that its units are interpreted as meters at the given latitude\r\n           var pixelsPerMeter = this.projectedUnitsPerMeter(lnglat[1]);\r\n           scale.multiplyScalar(pixelsPerMeter);\r\n       }\r\n\r\n       geoGroup.scale.copy(scale);\r\n\r\n       geoGroup.position.copy(this.projectToWorld(lnglat));\r\n       obj.coordinates = lnglat;\r\n\r\n       return obj;\r\n   },\r\n\r\n   projectedUnitsPerMeter: function(latitude) {\r\n     // 纬度越高放大越多\r\n       // return Math.abs( 512 * ( 1 / Math.cos( latitude * Math.PI / 180 ) ) / 40075000 );\r\n       return Math.abs( 512 * ( 1 / Math.cos( 45 * Math.PI / 180 ) ) / 40075000 );\r\n       // 40075000是地球周长（单位米）\r\n   },\r\n\r\n   projectToWorld: function (coords){\r\n       // Spherical mercator forward projection, re-scaling to WORLD_SIZE\r\n       /*\r\n       将经纬度转成webgl坐标，正好对应mapbox geo/transform的lngX、latY两个方法\r\n\r\n            * latitude to absolute x coord\r\n            * @returns {number} pixel coordinate\r\n\r\n            lngX(lng: number) {\r\n               return (180 + lng) * this.worldSize / 360;\r\n            }\r\n\r\n           * latitude to absolute y coord\r\n           * @returns {number} pixel coordinate\r\n\r\n            latY(lat: number) {\r\n                const y = 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360));\r\n                return (180 - y) * this.worldSize / 360;\r\n            }\r\n       */\r\n       var projected = [\r\n           -constants.MERCATOR_A * coords[0] * constants.DEG2RAD * constants.PROJECTION_WORLD_SIZE,\r\n           -constants.MERCATOR_A * Math.log(Math.tan((Math.PI*0.25) + (0.5 * coords[1] * constants.DEG2RAD))) * constants.PROJECTION_WORLD_SIZE\r\n       ];\r\n\r\n       var pixelsPerMeter = this.projectedUnitsPerMeter(coords[1]);\r\n\r\n       //z dimension\r\n       var height = coords[2] || 0;\r\n       projected.push( height * pixelsPerMeter );\r\n\r\n       var result = new THREE.Vector3(projected[0], projected[1], projected[2]);\r\n\r\n       return result;\r\n   },\r\n\r\n   getJSON: function() {\r\n\r\n     /**\r\n      * 生成一个XMLHttpRequest请求\r\n      * @param  {Object} requestParameters 请求参数\r\n      * @return {Object} 返回请求对象\r\n      */\r\n     function createRequest( requestParameters ) {\r\n       var xhr = new window.XMLHttpRequest();\r\n       xhr.open('GET', requestParameters.url, true);\r\n       for (var k in requestParameters.headers) {\r\n         xhr.setRequestHeader(k, requestParameters.headers[k]);\r\n       }\r\n\r\n       // 如果为true，则允许CORS请求发送cookie到服务器  详见 http://www.ruanyifeng.com/blog/2016/04/cors.html\r\n       xhr.withCredentials = requestParameters.credentials === 'include';\r\n       return xhr;\r\n     }\r\n\r\n     /**\r\n      * 读取一个json文件\r\n      * @param  {Object}   requestParameters 请求参数\r\n      * @param  {Function} callback          回调函数\r\n      * @return {[type]}                     [description]\r\n      *\r\n      * @example getJSON( { url:'./XXX.json' }, function( err, data ){ ... } )\r\n      */\r\n     return function( requestParameters, callback ) {\r\n\r\n       var xhr = createRequest( requestParameters );\r\n       xhr.setRequestHeader('Accept', 'application/json');\r\n       xhr.onerror = function() {\r\n         callback( new Error( xhr.statusText ) );\r\n       };\r\n       xhr.onload = function() {\r\n          // 成功执行区域\r\n          // 2XX表示有效响应\r\n          // 304意味着是从缓存读取\r\n         if ( xhr.status >= 200 && xhr.status < 300 && xhr.response ) { // 请求成功\r\n           var data;\r\n           try {\r\n             data = JSON.parse( xhr.response );\r\n           } catch ( err ) {\r\n             return callback( err );\r\n           }\r\n           callback( null, data );\r\n         } else { // 请求失败\r\n           callback( new AJAXError( xhr.statusText, xhr.status ) );\r\n         }\r\n       };\r\n       xhr.send();\r\n       return xhr;\r\n     }\r\n\r\n   }(),\r\n\r\n\r\n\r\n} )\r\n\r\n/**\r\n * Ajax请求错误对象\r\n * @param       {string} message 关于错误的描述\r\n * @param       {number} status  响应状态码\r\n * @constructor\r\n */\r\nfunction AJAXError( message, status ) {\r\n  Error.call( this, message );\r\n  this.status = status;\r\n}\r\n\r\nAJAXError.prototype = Object.create( Error.prototype );\r\n\r\nmodule.exports = Layer;\r\n"},"hash":"af333a447ac97e9c7c2532dc15a1c53e"}