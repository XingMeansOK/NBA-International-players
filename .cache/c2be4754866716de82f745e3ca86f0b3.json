{"dependencies":[{"name":"./lib/three.js","loc":{"line":1,"column":21}},{"name":"./constant.js","loc":{"line":2,"column":25}}],"generated":{"js":"var THREE = require( './lib/three.js' );\r\nvar constants = require( './constant.js' );\r\n\r\n/*\r\n  所有图层的父类，继承自three Group\r\n*/\r\nfunction Layer() {\r\n\r\n  THREE.Group.call( this );\r\n\r\n}\r\n\r\nLayer.prototype = Object.assign( Object.create( THREE.Group.prototype ), {\r\n\r\n  constructor: Layer,\r\n\r\n  /*\r\n    在指定位置添加three要素\r\n    @param obj:Mesh\r\n    @param lnglat: Array 经纬度\r\n    @param options: Object\r\n  */\r\n  addAtCoordinate: function(obj, lnglat, options) {\r\n       var geoGroup = new THREE.Group();\r\n       geoGroup.userData.isGeoGroup = true;\r\n       geoGroup.add(obj);\r\n       this.add(geoGroup);\r\n       this.moveToCoordinate(obj, lnglat, options);\r\n\r\n       // Bestow this mesh with animation superpowers and keeps track of its movements in the global animation queue\r\n       //this.animationManager.enroll(obj);\r\n\r\n       return obj;\r\n   },\r\n\r\n   moveToCoordinate: function(obj, lnglat, options) {\r\n       /** Place the given object on the map, centered around the provided longitude and latitude\r\n           The object's internal coordinates are assumed to be in meter-offset format, meaning\r\n           1 unit represents 1 meter distance away from the provided coordinate.\r\n       */\r\n\r\n       if (options === undefined) options = {};\r\n       if(options.preScale === undefined) options.preScale = 1.0;\r\n       if(options.scaleToLatitude === undefined || obj.userData.scaleToLatitude) options.scaleToLatitude = true;\r\n\r\n       obj.userData.scaleToLatitude = options.scaleToLatitude;\r\n\r\n       if (typeof options.preScale === 'number') options.preScale = new THREE.Vector3(options.preScale, options.preScale, options.preScale);\r\n       else if(options.preScale.constructor === Array && options.preScale.length === 3) options.preScale = new THREE.Vector3(options.preScale[0], options.preScale[1], options.preScale[2]);\r\n       else if(options.preScale.constructor !== THREE.Vector3) {\r\n           console.warn(\"Invalid preScale value: number, Array with length 3, or THREE.Vector3 expected. Defaulting to [1,1,1]\");\r\n           options.preScale = new THREE.Vector3(1,1,1);\r\n       }\r\n\r\n       var scale = options.preScale;\r\n\r\n       // Figure out if this object is a geoGroup and should be positioned and scaled directly, or if its parent\r\n       var geoGroup;\r\n       if (obj.userData.isGeoGroup) geoGroup = obj;\r\n       else if (obj.parent && obj.parent.userData.isGeoGroup) geoGroup = obj.parent;\r\n       else return console.error(\"Cannot set geographic coordinates of object that does not have an associated GeoGroup. Object must be added to scene with 'addAtCoordinate()'.\")\r\n\r\n       if(options.scaleToLatitude) {\r\n           // Scale the model so that its units are interpreted as meters at the given latitude\r\n           var pixelsPerMeter = this.projectedUnitsPerMeter(lnglat[1]);\r\n           scale.multiplyScalar(pixelsPerMeter);\r\n       }\r\n\r\n       geoGroup.scale.copy(scale);\r\n\r\n       geoGroup.position.copy(this.projectToWorld(lnglat));\r\n       obj.coordinates = lnglat;\r\n\r\n       return obj;\r\n   },\r\n\r\n   projectedUnitsPerMeter: function(latitude) {\r\n       return Math.abs( 512 * ( 1 / Math.cos( latitude * Math.PI / 180 ) ) / 40075000 );\r\n       // 40075000是地球周长（单位米）\r\n   },\r\n\r\n   projectToWorld: function (coords){\r\n       // Spherical mercator forward projection, re-scaling to WORLD_SIZE\r\n       /*\r\n       将经纬度转成webgl坐标，正好对应mapbox geo/transform的lngX、latY两个方法\r\n\r\n            * latitude to absolute x coord\r\n            * @returns {number} pixel coordinate\r\n\r\n            lngX(lng: number) {\r\n               return (180 + lng) * this.worldSize / 360;\r\n            }\r\n\r\n           * latitude to absolute y coord\r\n           * @returns {number} pixel coordinate\r\n\r\n            latY(lat: number) {\r\n                const y = 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360));\r\n                return (180 - y) * this.worldSize / 360;\r\n            }\r\n       */\r\n       var projected = [\r\n           -constants.MERCATOR_A * coords[0] * constants.DEG2RAD * constants.PROJECTION_WORLD_SIZE,\r\n           -constants.MERCATOR_A * Math.log(Math.tan((Math.PI*0.25) + (0.5 * coords[1] * constants.DEG2RAD))) * constants.PROJECTION_WORLD_SIZE\r\n       ];\r\n\r\n       var pixelsPerMeter = this.projectedUnitsPerMeter(coords[1]);\r\n\r\n       //z dimension\r\n       var height = coords[2] || 0;\r\n       projected.push( height * pixelsPerMeter );\r\n\r\n       var result = new THREE.Vector3(projected[0], projected[1], projected[2]);\r\n\r\n       return result;\r\n   },\r\n\r\n} )\r\n\r\nmodule.exports = Layer;\r\n"},"hash":"db9d9b24af150fd1e8399bf348a00cb2"}